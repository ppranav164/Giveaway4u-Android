Index: app/src/main/java/com/shopping/gway_4u/products_fragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.shopping.gway_4u;\n\nimport android.Manifest;\nimport android.app.Activity;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.pm.PackageManager;\nimport android.graphics.Bitmap;\nimport android.graphics.Color;\nimport android.graphics.Paint;\nimport android.net.Uri;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.text.Editable;\nimport android.text.TextWatcher;\nimport android.util.Log;\nimport android.view.Gravity;\nimport android.view.KeyEvent;\nimport android.view.LayoutInflater;\nimport android.view.Menu;\nimport android.view.MenuInflater;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.ImageButton;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.RadioButton;\nimport android.widget.RadioGroup;\nimport android.widget.RatingBar;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.annotation.RequiresApi;\nimport androidx.core.app.ActivityCompat;\nimport androidx.core.view.MenuItemCompat;\nimport androidx.fragment.app.Fragment;\nimport androidx.fragment.app.FragmentManager;\nimport androidx.fragment.app.FragmentTransaction;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\nimport androidx.viewpager.widget.ViewPager;\n\nimport com.github.chrisbanes.photoview.PhotoView;\nimport com.google.android.material.snackbar.Snackbar;\nimport com.google.android.material.tabs.TabLayout;\n\nimport org.json.JSONArray;\nimport org.json.JSONObject;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\npublic class products_fragment extends Fragment implements RecyclerViewClickListener , product_slider_listener {\n\n    private static final int RESULT_OK = 1 ;\n    View view;\n\n    View entireView;\n\n    ImageButton wishlist;\n\n    TextView textView,priceView,stockView,cid,offer,dfilename,brandTv;\n\n    String brandName = \"\";\n\n    RecyclerView productsrecyclerviw;\n\n    ViewPager viewPager;\n\n    LinearLayout linearLayout;\n    LinearLayout Textboxlayout;\n\n    Button UploadBtn;\n\n    ImageButton fullscreenBtn;\n\n    TextView descp;\n\n    ImageView previewImg;\n\n    RecyclerView recyclerView;\n\n    PhotoView photoView;\n\n    Context context;\n\n    specFragment specFragment;\n\n    JSONArray reviewsJson;\n\n    int reviewsCount = 0;\n\n    TextView reviewTotalTv;\n    RatingBar ratingbar;\n\n    private ImageView imageView,upimageshow;\n\n    private Bitmap bitmap;\n\n    private Uri filePath;\n\n    EditText editText;\n\n    TextView codd;\n\n    String uploadCodes;\n\n    List<String> sendImage;\n\n     int product_option_id;\n\n    RelativeLayout frameLayout;\n\n    TabLayout tabLayout;\n\n    Button cartBtn;\n\n    public static   String descriptions,reviews,tabTexts;\n\n\n    String fulldata;\n\n    boolean isFileRequired;\n    boolean isCheckRequired;\n    boolean isTextRequired;\n\n    boolean isChecked;\n\n    boolean error;\n\n    TextView notify;\n\n    Cart_details cart_details;\n\n    private String cartCount;\n\n\n    View menutabs;\n\n    LinearLayout radioGroup;\n\n    RadioButton[] radioButtons = new RadioButton[5];\n\n    RadioGroup[] radioGroups = new RadioGroup[5];\n\n    RadioButton rbutton;\n\n    TextView radiotxt;\n\n    boolean success;\n\n    TextView[] radioHeader = new TextView[5];\n\n    EditText qtext;\n\n\n    ImageButton plus,minus;\n\n    int num=0;\n\n    int limit;\n\n    String link;\n\n    config_hosts hosts  = new config_hosts();\n\n    ArrayList<String> products_id = new ArrayList<>();\n\n\n    int product_options_id = 0; //227 for file options[227] = code // gf44gr44e434ww435df345234523452345\n\n\n    int textArea_product_id = 0;\n\n    recycleradapter_cart cart;\n\n\n    Map<Integer,String> keyValue = new HashMap<>();\n\n    String param = \"\";\n\n\n    HashMap<Integer,String> uploadKeys = new HashMap<>();\n    HashMap<Integer,String> textKeys = new HashMap<>();\n\n    HashMap<String,Boolean> rules = new HashMap<>();\n\n    ArrayList<String> fileErrors = new ArrayList<>();\n\n\n    RadioGroup customRadio;\n\n    LinearLayout uploadlayout;\n\n    Button[] uploadButton  = new Button[5];\n\n    LinearLayout[] linearLayouts = new LinearLayout[5];\n\n    TextView[] codeView = new TextView[5];\n\n    TextView textViewcode;\n\n    String options =\"\";\n\n    ImageView imageViews;\n\n    ImageButton share;\n\n    LinearLayout previewLayout;\n\n\n    boolean hasPermission;\n\n    String shareProductID = \"\";\n\n    String productShareTitle = \"\";\n\n\n    product_slider_listener slider_listener;\n\n    private Handler handler;\n\n\n    public products_fragment(Context context) {\n\n        this.context = context;\n    }\n\n\n    @Nullable\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n\n\n        view = inflater.inflate(R.layout.layout_products,container,false);\n\n        viewPager = view.findViewById(R.id.productslider);\n\n        Textboxlayout = view.findViewById(R.id.textbox);\n\n        return view;\n    }\n\n\n\n\n\n    @Override\n    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n        // TODO Add your menu entries here\n        //super.onCreateOptionsMenu(menu, inflater);\n\n        //getActivity().getMenuInflater().inflate(R.menu.main, menu);\n\n        final MenuItem menuItem = menu.findItem(R.id.cart);\n        menutabs = MenuItemCompat.getActionView(menuItem);\n\n\n    }\n\n\n\n\n\n\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n\n\n\n        final View view = getView();\n\n\n\n        qtext = view.findViewById(R.id.quantity);\n\n        qtext.setText(String.valueOf(limit));\n\n        reviewTotalTv = view.findViewById(R.id.reviewsCount);\n        ratingbar = view.findViewById(R.id.ratingbutton);\n\n\n        quanityButton(view);\n\n\n        cartBtn = view.findViewById(R.id.addToCart);\n\n        share = view.findViewById(R.id.btnshare);\n\n        shareProduct();\n\n        uploadlayout = view.findViewById(R.id.uploadbox);\n\n\n        previewLayout = view.findViewById(R.id.preview);\n\n\n        frameLayout = view.findViewById(R.id.framwla);\n\n        tabLayout = view.findViewById(R.id.mytabs);\n\n        TabLayout.Tab firstTab = tabLayout.newTab();\n\n        TabLayout.Tab secTab = tabLayout.newTab();\n\n        TabLayout.Tab ThTab = tabLayout.newTab();\n\n        firstTab.setText(\"Description\");\n\n        ThTab.setText(\"Reviews\");\n\n        tabLayout.addTab(firstTab);\n        tabLayout.addTab(ThTab);\n\n        tabLayout.getTabAt(0).select();\n\n        FragmentManager manager = getFragmentManager();\n\n        FragmentTransaction transaction = manager.beginTransaction();\n\n        transaction.replace(R.id.framwla,new specFragment(descriptions));\n\n        transaction.commit();\n\n        final Boolean[] clicked = {false};\n         setWishlist(view);\n         checkPermissionForReadExtertalStorage();\n\n         hasPermission = checkPermissionForReadExtertalStorage();\n\n         handler = new Handler();\n\n        FragmentManager fragmentManager = getFragmentManager();\n        FragmentTransaction stransaction = fragmentManager.beginTransaction();\n        stransaction.replace(R.id.framwla,new loadingSmall());\n        stransaction.commit();\n\n         handler.postDelayed(new Runnable() {\n             @Override\n             public void run() {\n                 FragmentManager fragmentManager = getFragmentManager();\n                 FragmentTransaction transaction = fragmentManager.beginTransaction();\n                 transaction.replace(R.id.framwla,new specFragment(descriptions));\n                 transaction.commit();\n             }\n         },1000);\n\n\n        tabLayout.setOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\n            @Override\n            public void onTabSelected(TabLayout.Tab tab) {\n\n\n                Fragment fragment = null;\n\n                int id = tab.getPosition();\n\n                if (id == 0)\n                {\n                    fragment = new specFragment(descriptions);\n\n                }else if (id == 1)\n                {\n                    fragment = new reviewsFragment(reviewsJson,getContext());\n\n                    if (reviewsJson.isNull(0)){\n                        Snackbar.make(view,\"No reviews found for this item !\",Snackbar.LENGTH_SHORT).show();\n                    }\n\n                }\n\n\n                FragmentManager fragmentManager = getFragmentManager();\n                FragmentTransaction transaction = fragmentManager.beginTransaction();\n                transaction.setCustomAnimations(R.anim.enter_from_right, R.anim.exit_to_left, R.anim.enter_from_left, R.anim.exit_to_right);\n                transaction.replace(R.id.framwla,fragment);\n                transaction.commit();\n\n\n            }\n\n            @Override\n            public void onTabUnselected(TabLayout.Tab tab) {\n\n            }\n\n            @Override\n            public void onTabReselected(TabLayout.Tab tab) {\n\n            }\n        });\n\n\n        Bundle bundle = getArguments();\n\n        if (bundle !=null)\n        {\n            String res = bundle.getString(\"_id\");\n\n            //Toast.makeText(getContext(),\"Id is \"+res,Toast.LENGTH_LONG).show();\n\n            new SyncProduct(getContext(), new products() {\n                @Override\n                public void loadProductInfo(String data) {\n\n                    fulldata = data;\n\n\n                    setProductInfo(data);\n\n                    try {\n\n                        JSONObject object = new JSONObject(data);\n\n                        setUpCart(object ,cartBtn);\n\n                    }catch (Exception e)\n                    {\n                        e.printStackTrace();\n                    }\n\n\n\n                }\n            },res).execute();\n\n        }\n\n\n\n\n        isWishlistExists();\n\n\n        getView().setFocusableInTouchMode(true);\n        getView().requestFocus();\n\n        getView().setOnKeyListener(new View.OnKeyListener() {\n            @Override\n            public boolean onKey(View v, int keyCode, KeyEvent event) {\n                if (event.getAction() == KeyEvent.ACTION_DOWN) {\n                    if (keyCode == KeyEvent.KEYCODE_BACK) {\n                        //Toast.makeText(getContext(),\"Products Fragment\",Toast.LENGTH_LONG).show();\n                        getFragmentManager().popBackStackImmediate();\n                        return true;\n                    }\n                }\n                return false;\n            }\n        });\n\n\n\n\n\n        wishlist = view.findViewById(R.id.wishlistB);\n\n\n        viewPager.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Toast.makeText(getContext(),\"Hii\",Toast.LENGTH_LONG).show();\n            }\n        });\n\n    }\n\n\n\n\n    public void setWishlist(View view)\n    {\n\n\n        wishlist = view.findViewById(R.id.wishlistB);\n\n        wishlist.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n\n                String tag = wishlist.getTag().toString();\n\n\n                switch (tag)\n                {\n                    case \"yellow\" :  wishlist.setBackgroundResource(R.drawable.wishlistp);\n                                     wishlist.setTag(\"red\");\n                                     addWishlist();\n                                     break;\n\n                    case \"red\"    :  wishlist.setBackgroundResource(R.drawable.wishlist);\n                                     wishlist.setTag(\"yellow\");\n                                     removeWishlist();\n                                     break;\n                }\n\n\n            }\n        });\n\n\n    }\n\n\n\n\n    public void isWishlistExists()\n    {\n\n\n        wishlist.setBackgroundResource(R.drawable.wishlist);\n\n        wishlist.setTag(\"yellow\");\n\n\n        new sync_get_wishlist(getContext(), new wishlist() {\n            @Override\n            public void loadWishlist(String data) {\n                try {\n\n                    JSONObject object = new JSONObject(data);\n\n                    JSONArray products = object.getJSONArray(\"products\");\n\n                    for (int i=0; i < products.length(); i++)\n                    {\n                       JSONObject id = products.getJSONObject(i);\n\n                       String product_id = id.getString(\"product_id\");\n\n                       listWishlists(product_id);\n                    }\n\n                }catch (Exception e)\n                {\n                    e.printStackTrace();\n                }\n            }\n        }).execute();\n\n\n\n    }\n\n\n\n    public void listWishlists(String products)\n    {\n        products_id.add(products);\n\n        cid = view.findViewById(R.id.cid);\n\n        String id = cid.getText().toString();\n\n\n        for (int i=0; i < products_id.size(); i++)\n        {\n\n            String data = products_id.get(i);\n\n            if (data.contains(id))\n            {\n                wishlist.setBackgroundResource(R.drawable.wishlistp);\n                wishlist.setTag(\"red\");\n            }\n        }\n\n    }\n\n\n\n\n    public void addWishlist()\n    {\n\n        cid = view.findViewById(R.id.cid);\n\n        int id = Integer.parseInt(cid.getText().toString());\n\n        link = hosts.wishlist_remove+id;\n\n        new syncWishlist(getContext(),id).execute();\n\n        Snackbar snackbar = Snackbar.make(view,\"Added to Wishlist\",Snackbar.LENGTH_LONG);\n\n        View snackView = snackbar.getView();\n\n        snackView.setBackgroundColor(Color.parseColor(\"#008c48\"));\n\n        snackbar.setActionTextColor(Color.parseColor(\"#FFFFFF\"));\n\n        snackbar.setAction(\"View Wishlist\", new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n\n\n                FragmentManager manager = getFragmentManager();\n\n                FragmentTransaction transaction = manager.beginTransaction();\n\n                transaction.replace(R.id.mainframeL,new WishlistFragment(),\"products\");\n                transaction.addToBackStack(\"products\");\n                transaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);\n                transaction.commit();\n\n            }\n        });\n\n        snackbar.show();\n\n    }\n\n\n\n    public void removeWishlist()\n    {\n\n        cid = view.findViewById(R.id.cid);\n\n        String id = cid.getText().toString();\n\n        link = hosts.wishlist_remove+id;\n\n        new syncRemoveWishlist(getContext(),link,\"GET\").execute();\n\n        Snackbar snackbar = Snackbar.make(view,\"Removed successfully\",Snackbar.LENGTH_SHORT);\n\n        snackbar.show();\n\n\n\n    }\n\n\n\n\n    public void fileChooser(int requestCode)\n    {\n\n       if (hasPermission !=false)\n       {\n           Intent intent = new Intent();\n\n           intent.setType(\"image/*\");\n\n           intent.setAction(Intent.ACTION_GET_CONTENT);\n\n           startActivityForResult(Intent.createChooser(intent,\"Select a Image\"),requestCode);\n\n       }else {\n\n\n           Toast.makeText(getContext(),\"You don not have granted permission access storage\",Toast.LENGTH_SHORT).show();\n\n          try {\n\n              requestPermissionForReadExtertalStorage();\n\n              hasPermission = true;\n\n          }catch (Exception e)\n          {\n              e.printStackTrace();\n          }\n\n\n       }\n\n\n\n    }\n\n\n\n\n    @Override\n    public void onActivityResult(final int requestCode, int resultCode, @Nullable Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n\n        if (resultCode == Activity.RESULT_OK && data != null && data.getData() != null)\n        {\n            filePath = data.getData();\n            //dfilename = view.findViewById(R.id.filename);\n            String selectedFilePath = FilePath.getPath(getContext(),data.getData());\n            String[] parts = selectedFilePath.split(\"/\");\n            final String fileName = parts[parts.length - 1];\n            final int plus = 1;\n            final LinearLayout.LayoutParams previewparam = new LinearLayout.LayoutParams(300,300);\n            previewparam.setMargins(10,10,10,10);\n            //dfilename.setText(fileName);\n            codd = view.findViewById(R.id.codes);\n            new syncUpload_image(getContext(),filePath, new upload() {\n                @RequiresApi(api = Build.VERSION_CODES.N)\n                @Override\n                public void status(String status) {\n\n                    Log.e(\"error\",status);\n                    try {\n                        JSONObject object = new JSONObject(status);\n                        if (object.has(\"code\"))\n                        {\n                            String code = object.getString(\"code\");\n                            codd.setText(code);\n                            uploadCodes = code;\n                            keyValue.put(requestCode,code);\n                            String cod = String.valueOf(requestCode);\n                            rules.replace(cod,false);\n                            Log.e(\"final\",keyValue.toString());\n                            ImageView imageView = new ImageView(getContext());\n                            imageView.setId(plus+requestCode);\n                            imageView.setLayoutParams(previewparam);\n                            previewLayout.addView(imageView);\n                            ImageView screen = (ImageView) previewLayout.findViewById(plus+requestCode);\n                            screen.setImageURI(filePath);\n                        }else\n                        {\n                            Log.e(\"isUploaded\",object.getString(\"uploaded\"));\n                            Toast.makeText(getContext(),object.getString(\"error\"),Toast.LENGTH_SHORT).show();\n                        }\n\n                    }catch (Exception e)\n                    {\n                        e.printStackTrace();\n                    }\n                }\n            }).execute();\n\n            cid = view.findViewById(R.id.cid);\n        }\n\n\n    }\n\n\n\n    public void setUploadCode(int requestCode,String code)\n    {\n        StringBuilder builder = new StringBuilder();\n        String data = \"option[\"+requestCode+\"]=\"+code+\"&\";\n        builder.append(data);\n    }\n\n\n    public  void setDescriptions(String data)\n    {\n        descriptions = data;\n    }\n\n    public void setTabTexts(String data)\n    {\n        tabTexts = data;\n    }\n\n    public void setReviewData(JSONArray array)\n    {\n        this.reviewsJson = array;\n        String count =String.valueOf(array.length());\n        reviewTotalTv.setText(\"(\"+count+\")\");\n        ratingbar.setRating(reviewsCount);\n    }\n\n\n    \n   public void setProductInfo(String data)\n\n   {\n\n\n       try {\n\n           JSONObject object = new JSONObject(data);\n\n           parseData(object);\n\n\n\n       }catch (Exception e)\n       {\n           e.printStackTrace();\n       }\n\n\n\n   }\n\n\n\n   public void parseData(JSONObject objects)\n   {\n\n\n\n\n\n       try {\n\n\n           String mfg = objects.getString(\"heading_title\");\n\n           String brand = objects.getString(\"manufacturer\");\n\n           String price = objects.getString(\"price\");\n\n           String sharelink = objects.getString(\"share\");\n\n           reviewsCount = objects.getInt(\"rating\");\n\n           shareProductID = objects.getString(\"product_id\");;\n           productShareTitle = objects.getString(\"heading_title\");\n\n           String stock = objects.getString(\"stock\");\n\n           Log.e(\"Product Fragment > Stock\",stock);\n\n           String descps = objects.getString(\"description\");\n\n           String description = objects.getString(\"description\");\n\n           String reviewTabtxt = objects.getString(\"tab_review\");\n\n           JSONArray review_data = objects.getJSONArray(\"reviews\");\n\n           String image = objects.getString(\"thumb\");\n\n           String pid = objects.getString(\"product_id\");\n\n           String cutPrice = objects.getString(\"special\");\n\n           String minimum = objects.getString(\"minimum\");\n\n           JSONArray imagesArray = objects.getJSONArray(\"images\");\n\n           limit = Integer.parseInt(minimum);\n\n\n           setReviewData(review_data);\n\n           setDescriptions(descps);\n\n           setTabTexts(\"loooooo\");\n\n\n           //photoView = view.findViewById(R.id.previewer);\n\n\n\n           textView = view.findViewById(R.id.display);\n\n           fullscreenBtn = view.findViewById(R.id.fullscreenB);\n\n           priceView = view.findViewById(R.id.priceView);\n\n           stockView = view.findViewById(R.id.stock);\n\n\n           cid = view.findViewById(R.id.cid);\n\n           offer = view.findViewById(R.id.special);\n\n           productsrecyclerviw = view.findViewById(R.id.thumb_recyclerview);\n\n            ArrayList<String> imageData = new ArrayList<>();\n\n           sendImage = new ArrayList<>();\n\n\n           imageData.add(image);\n           sendImage.add(image);\n\n           for (int k=0; k < imagesArray.length(); k++ )\n           {\n               JSONObject imageObject = imagesArray.getJSONObject(k);\n\n               String popups = imageObject.getString(\"popup\");\n               imageData.add(popups);\n               sendImage.add(popups);\n\n           }\n\n           slider_listener = this;\n\n           productsrecyclerviw.setLayoutManager(new LinearLayoutManager(getContext(),RecyclerView.HORIZONTAL,false));\n           previewproducts_adapter adapter = new previewproducts_adapter(getContext(),imageData,this);\n           productsrecyclerviw.setAdapter(adapter);\n\n           viewPager.setAdapter(new slide_adapter_product(getContext(),imageData,slider_listener));\n\n\n           fullscreenBtn.setOnClickListener(new View.OnClickListener() {\n               @Override\n               public void onClick(View v) {\n\n                   FullScreenSlider(sendImage);\n               }\n           });\n\n\n           //photoView.setImageResource(R.drawable.logo);\n\n           //Picasso.get().load(image).into(photoView);\n\n\n           cid.setText(pid);\n\n           textView.setText(mfg);\n\n           if (cutPrice == \"false\"){\n\n               priceView.setText(price);\n\n               offer.setVisibility(View.GONE);\n\n           }else {\n\n               priceView.setText(price);\n               offer.setText(cutPrice);\n\n               Paint paint = new Paint();\n               paint.setColor(Color.parseColor(\"#ff0000\"));\n               paint.setFlags(Paint.STRIKE_THRU_TEXT_FLAG);\n\n               priceView.setPaintFlags(paint.getFlags());\n\n           }\n\n\n\n\n           cartBtn = getView().findViewById(R.id.addToCart);\n\n\n           if (stock.matches(\"Out Of Stock\"))\n           {\n\n               stockView.setText(\"Not Available\");\n               stockView.setTextColor(getResources().getColor(R.color.red));\n               cartBtn.setEnabled(false);\n               cartBtn.setBackgroundColor(getResources().getColor(R.color.grey));\n               cartBtn.setText(stock);\n               cartBtn.setOnClickListener(new View.OnClickListener() {\n                   @Override\n                   public void onClick(View v) {\n                       Toast.makeText(getContext(),\"Not available\",Toast.LENGTH_LONG).show();\n                   }\n               });\n\n           }else {\n\n               stockView.setText(stock);\n               stockView.setTextColor(getResources().getColor(R.color.green));\n           }\n\n\n\n          if (descps.contains(\"&nbsp;\"))\n          {\n              descps = descps.replace(\"&nbsp;\",\" \");\n          }\n\n\n\n           radioGroup = view.findViewById(R.id.radios);\n\n          radioOptionsview(objects);\n\n\n\n           //Product options here\n           //show random options required for a product\n           //all items should  atleast be checked at index 0 (Checked / selected )\n\n\n           linearLayout = view.findViewById(R.id.uploadbox);\n           JSONObject optb = objects.getJSONObject(\"upload\");\n\n\n          for (int i=0; i < objects.length(); i++)\n          {\n\n              if (objects.has(\"upload\"))\n              {\n\n                  Log.e(\"extra_option\",optb.toString());\n\n                  if (optb.has(\"file\"))\n                  {\n                      JSONArray array = optb.getJSONArray(\"file\");\n                      for (int k=0; k<array.length(); k++)\n                      {\n                          JSONObject jsonObject = array.getJSONObject(k);\n                          String type = jsonObject.getString(\"type\");\n                          String uploadId = jsonObject.getString(\"product_option_id\");\n                          String upload_title = jsonObject.getString(\"name\");\n                          int upload_id = Integer.parseInt(uploadId);\n                          uploadKeys.put(upload_id,upload_title);\n                          linearLayout.setVisibility(View.VISIBLE);\n                          isFileRequired = true;\n                          product_options_id = Integer.parseInt(uploadId);\n                      }\n                  }\n\n                  if (optb.has(\"textarea\"))\n                  {\n                      JSONArray textArea = optb.getJSONArray(\"textarea\");\n\n                      for (int k=0; k<textArea.length(); k++)\n                      {\n                          JSONObject jsonObject = textArea.getJSONObject(k);\n                          String type = jsonObject.getString(\"type\");\n                          String option_text_id = jsonObject.getString(\"product_option_id\");\n                          String textTitle = jsonObject.getString(\"name\");\n                          int textID = Integer.parseInt(option_text_id);\n                          textKeys.put(textID,textTitle);\n                          Textboxlayout.setVisibility(View.VISIBLE);\n                          isTextRequired = true;\n                          textArea_product_id = Integer.parseInt(option_text_id);\n\n                      }\n                  }\n\n              }\n\n          }\n\n          if (objects.has(\"upload\"))\n          {\n              if (optb.has(\"file\"))\n              {\n                  JSONArray array = optb.getJSONArray(\"file\");\n                  uploadFileView(array.length());\n              }\n\n              if (optb.has(\"textarea\"))\n              {\n                  JSONArray textArea = optb.getJSONArray(\"textarea\");\n                  TextArea(textArea.length());\n              }\n          }\n\n\n       }catch (Exception e)\n       {\n           e.printStackTrace();\n       }\n\n\n\n   }\n\n\n\n   public void radioOptionsview(JSONObject objects)\n   {\n       try {\n\n           JSONArray optionsArray = objects.getJSONArray(\"options\");\n\n\n           Map<String,String> radiokeys = new HashMap<>();\n\n           LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,\n\n                   LinearLayout.LayoutParams.WRAP_CONTENT);\n\n\n           LinearLayout.LayoutParams textviewparam = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);\n\n           textviewparam.setMargins(20,20,0,0);\n\n\n\n\n           for (int l=0; l < optionsArray.length(); l++)\n           {\n               JSONObject optionObj = optionsArray.getJSONObject(l);\n\n               String type = optionObj.getString(\"type\");\n\n               String title = optionObj.getString(\"title\");\n\n               String optionId = optionObj.getString(\"id\");\n\n               radiotxt = view.findViewById(R.id.radioid);\n\n               radiotxt.setText(optionId);\n\n               radioHeader[l] = new TextView(getContext());\n               radioHeader[l].setText(title);\n               radioHeader[l].setLayoutParams(textviewparam);\n               radioHeader[l].setTextColor(getResources().getColor(R.color.black));\n\n\n\n               radioGroup.addView(radioHeader[l]);\n\n\n\n               radioGroups[l] = new RadioGroup(getContext());\n               radioGroups[l].setTag(title);\n               radioGroups[l].setId(Integer.parseInt(optionId));\n               radioGroups[l].setOrientation(LinearLayout.HORIZONTAL);\n\n               radioGroup.addView(radioGroups[l]);\n\n\n\n\n               LinearLayout.LayoutParams radioparams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);\n\n               radioparams.setMargins(20,20,0,0);\n\n\n\n               JSONArray items = optionObj.getJSONArray(\"items\");\n\n               for (int p=0; p < items.length(); p++)\n               {\n                   JSONObject itemObj = items.getJSONObject(p);\n\n                   String id = itemObj.getString(\"id\");\n\n                   String value = itemObj.getString(\"value\");\n\n\n                   radioButtons[p] = new RadioButton(getContext());\n                   radioButtons[p].setButtonDrawable(android.R.color.transparent);\n                   radioButtons[p].setBackgroundResource(R.drawable.radio_background);\n                   radioButtons[p].setLayoutParams(params);\n                   radioButtons[p].setPadding(20,20,20,20);\n\n                   radioButtons[p].setId(Integer.parseInt(id));\n                   radioButtons[p].setTag(id);\n                   radioButtons[p].setText(value);\n                   radioButtons[0].setChecked(true);\n                   radioButtons[p].setLayoutParams(radioparams);\n                   radioGroups[l].addView(radioButtons[p]);\n                   radioButtons[p].setGravity(Gravity.CENTER);\n\n\n                   int key = radioGroups[l].getId();\n\n                   String values = String.valueOf(radioGroups[l].getCheckedRadioButtonId());\n\n\n                   keyValue.put(key,values);\n\n                   isChecked = true;\n\n\n                   radioGroups[l].setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {\n\n                       @Override\n                       public void onCheckedChanged(RadioGroup group, int checkedId) {\n\n                           int who = group.getId();\n                           String rbId = String.valueOf(checkedId);\n                           keyValue.put(who,rbId);\n                           isChecked = true;\n\n                       }\n                   });\n\n               }\n\n               if (type.equals(\"radio\"))\n               {\n                   int total = radiokeys.size();\n                   isCheckRequired = true;\n                   Iterator it = radiokeys.entrySet().iterator();\n               }\n\n           }\n\n       }catch (Exception e)\n       {\n           e.printStackTrace();\n       }\n   }\n\n\n   public void uploadFileView(int length)\n   {\n       LinearLayout.LayoutParams params1 = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);\n       params1.setMargins(5,5,5,5);\n       Iterator iterator = uploadKeys.entrySet().iterator();\n\n       int index =-1;\n\n       TextView[] texts = new TextView[length];\n       texts[0] = new TextView(getContext());\n       texts[0].setText(\"File Upload :\");\n       uploadlayout.addView(texts[0]);\n\n       while (iterator.hasNext())\n       {\n\n           index++;\n\n           Map.Entry pair = (Map.Entry) iterator.next();\n\n           String value = pair.getValue().toString();\n\n           int id = Integer.parseInt(pair.getKey().toString());\n\n           linearLayouts[index] = new LinearLayout(getContext());\n           linearLayouts[index].setLayoutParams(params1);\n           linearLayouts[index].setId(id);\n\n           uploadlayout.addView(linearLayouts[index]);\n\n\n           uploadButton[index] = new Button(getContext());\n           uploadButton[index].setTag(id);\n           uploadButton[index].setText(value);\n           uploadButton[index].setBackgroundResource(R.drawable.upload_active);\n\n\n           String codes = String.valueOf(id);\n\n           rules.put(codes,true);\n           uploadlayout.addView(uploadButton[index]);\n           uploadButton[index].setOnClickListener(new View.OnClickListener() {\n               @Override\n               public void onClick(View v) {\n\n                   String opt = v.getTag().toString();\n                   int code = Integer.parseInt(opt);\n                   fileChooser(code);\n               }\n           });\n       }\n   }\n\n\n\n   public void TextArea(int length)\n   {\n       Iterator iterator = textKeys.entrySet().iterator();\n       TextView[] texts = new TextView[length];\n       EditText[] editTexts = new EditText[length];\n\n       int index = -1;\n\n       while (iterator.hasNext())\n       {\n\n           index++;\n\n           Map.Entry pair = (Map.Entry) iterator.next();\n           String value = pair.getValue().toString();\n           final int id = Integer.parseInt(pair.getKey().toString());\n           final String codes = String.valueOf(id);\n\n\n           texts[index] = new TextView(getContext());\n           texts[index].setText(value);\n           Textboxlayout.addView(texts[index]);\n\n           editTexts[index] = new EditText(getContext());\n           editTexts[index].setLines(4);\n           editTexts[index].setTag(codes);\n           Textboxlayout.addView(editTexts[index]);\n\n           rules.put(codes,true);\n\n           editTexts[index].addTextChangedListener(new TextWatcher() {\n               @Override\n               public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n\n               }\n\n               @Override\n               public void onTextChanged(CharSequence s, int start, int before, int count) {\n\n                   int textlength = count;\n                   String chars = s.toString();\n\n                   if (count > 0)\n                   {\n                       keyValue.put(id,chars);\n                       rules.put(codes,false);\n                   }else {\n\n                       keyValue.remove(id);\n                       rules.put(codes,true);\n                   }\n\n               }\n\n               @Override\n               public void afterTextChanged(Editable s) {\n\n\n               }\n           });\n\n       }\n\n   }\n\n\n\n\n   public void FullScreenSlider(List<String> images)\n   {\n       int position = viewPager.getCurrentItem();\n       Intent intent = new Intent(getContext(),FullscreenSlider.class);\n       intent.putStringArrayListExtra(\"image\", (ArrayList<String>) images);\n       intent.putExtra(\"position\",position);\n       startActivity(intent);\n   }\n\n\n\n   public void setUpCart(final JSONObject data, final View view)\n\n   {\n\n\n\n       view.setOnClickListener(new View.OnClickListener() {\n           @Override\n           public void onClick(View v) {\n\n               entireView = getView();\n\n\n               qtext = entireView.findViewById(R.id.quantity);\n\n               Log.e(\"Cart \",keyValue.toString());\n\n               Log.e(\"rules\",rules.toString());\n\n\n\n              if (success !=false)\n              {\n                  //redirectHome();\n              }\n\n               int cart_pro_id = 0;\n\n               int quantity = Integer.parseInt(qtext.getText().toString());\n\n\n               radiotxt = entireView.findViewById(R.id.radioid);\n\n               String id = radiotxt.getText().toString();\n\n\n               if (textKeys.size() > 0)\n               {\n                   Iterator iterator = textKeys.entrySet().iterator();\n                   while (iterator.hasNext())\n                   {\n                       Map.Entry pair = (Map.Entry) iterator.next();\n                       Log.e(\"Textarea\",pair.getKey().toString());\n                       String tag = pair.getKey().toString();\n                       EditText editText = Textboxlayout.findViewWithTag(tag);\n                       int textLength = editText.length();\n                       if (textLength == 0)\n                       {\n                           editText.setError(\"Please Enter text\");\n                           error = true;\n                       }else {\n                           String text = editText.getText().toString();\n                           editText.setError(null);\n                       }\n                   }\n               }\n               else if (isCheckRequired == true && isChecked != true)\n               {\n                   error = true;\n                   Toast.makeText(getContext(),\"Please check color option\",Toast.LENGTH_SHORT).show();\n                   Log.e(\"isChecked\",String.valueOf(isChecked));\n                   Log.e(\"chech required\",String.valueOf(isCheckRequired));\n               }\n\n               else if (isFileRequired != false && uploadCodes == null) {\n\n\n                   Toast.makeText(getContext(),\"Please Upload files\",Toast.LENGTH_SHORT).show();\n                   error = true;\n\n               }\n\n               else  if (rules.containsValue(true))\n               {\n\n                   Toast.makeText(getContext(),\"Please Upload files\",Toast.LENGTH_SHORT).show();\n                   error = true;\n                   Iterator iter = rules.entrySet().iterator();\n                   while (iter.hasNext())\n                   {\n                       Map.Entry keys = (Map.Entry) iter.next();\n                       boolean val = (Boolean) keys.getValue();\n                   }\n               }\n               else\n               {\n\n                   error = false;\n               }\n\n\n               try {\n\n                      cart_pro_id = data.getInt(\"product_id\");\n                      StringBuilder stringBuilder = new StringBuilder();\n                      Iterator iterator = keyValue.entrySet().iterator();\n\n\n                      while (iterator.hasNext())\n                      {\n                          Map.Entry pair = (Map.Entry) iterator.next();\n                          int key = Integer.parseInt( pair.getKey().toString());\n                          String values = pair.getValue().toString();\n                          keyValue.put(key,values);\n                          String params = \"option[\"+key+\"]=\"+values+\"&\";\n                          stringBuilder.append(params);\n                      }\n\n                      options = stringBuilder.toString();\n                      options += \"product_id=\"+cart_pro_id+\"&quantity=\"+quantity;\n\n                      Log.e(\"Selected Option\",options);\n\n\n               }catch (Exception e)\n               {\n                   e.printStackTrace();\n               }\n\n\n               Log.e(\"isChecked\",String.valueOf(isChecked));\n               Log.e(\"chech required\",String.valueOf(isCheckRequired));\n\n\n               if (error != true)\n\n               {\n                   new syncCartAdd(getContext(),options, new addedToCart() {\n                       @Override\n                       public void loadCarts(String data) {\n\n                           Log.e(\"loadCarts\",data);\n                           try {\n                               JSONObject messageobj = new JSONObject(data);\n                               String message = messageobj.getString(\"status\");\n                               Log.e(\"Server Response\",message);\n                               if (message == \"success\")\n                               {\n                                  success = true;\n                               }\n                           }catch (Exception e)\n                           {\n                               e.printStackTrace();\n                           }\n                       }\n                   }).execute();\n\n\n                   new syncInfo(getContext(), new info() {\n                       @Override\n                       public void getInfo(String data) {\n\n                           try {\n\n                               JSONObject jsonObject = new JSONObject(data);\n                               String items = jsonObject.getString(\"text_items\");\n\n                               //Textview here to set count to cart basket\n                               notify = menutabs.findViewById(R.id.notify_badge);\n\n                               notify.setText(items);\n\n                               Log.e(\"total\",items);\n\n                           }catch (Exception e)\n                           {\n                               e.printStackTrace();\n                           }\n\n                       }\n                   }).execute();\n\n                   setHasOptionsMenu(true);\n\n                   Snackbar.make(view,\"Item added to cart\",Snackbar.LENGTH_SHORT).show();\n\n                   redirectHome();\n\n               }\n\n           }\n\n       });\n\n\n\n   }\n\n\n\n   public void redirectHome()\n\n   {\n       Fragment fragment = new fragment_main();\n       FragmentManager manager = getFragmentManager();\n       FragmentTransaction transaction = manager.beginTransaction();\n       transaction.replace(R.id.mainframeL,fragment);\n       transaction.commit();\n\n   }\n\n\n\n   public void quanityButton(View views)\n\n   {\n\n\n       plus = views.findViewById(R.id.plus);\n\n       minus = views.findViewById(R.id.minus);\n\n       qtext = views.findViewById(R.id.quantity);\n\n       qtext.setText(String.valueOf(1));\n\n\n       plus.setOnClickListener(new View.OnClickListener() {\n           @Override\n           public void onClick(View v) {\n\n               num++;\n\n               setPlus();\n\n           }\n       });\n\n\n       minus.setOnClickListener(new View.OnClickListener() {\n           @Override\n           public void onClick(View v) {\n               setMinus();\n           }\n       });\n\n   }\n\n\n\n\n\n\n   public void setPlus()\n\n   {\n\n       entireView = getView();\n\n       qtext = entireView.findViewById(R.id.quantity);\n\n       if (num > 0)\n       {\n           num = Integer.parseInt(qtext.getText().toString());\n\n           num++;\n       }\n\n       if (num > 10)\n       {\n           num = 10;\n\n           Toast.makeText(getContext(),\"You have reached quanity limit\",Toast.LENGTH_SHORT).show();\n       }\n\n       qtext.setText(String.valueOf(num));\n\n   }\n\n\n\n\n    public void setMinus()\n\n    {\n\n        entireView = getView();\n\n        qtext = entireView.findViewById(R.id.quantity);\n\n        int currentValue = Integer.parseInt(qtext.getText().toString());\n\n        int subs = currentValue - 1;\n\n        if (subs < 1)\n        {\n            subs = limit;\n\n            //set to 1 if a user is going to decrement less than 1\n        }\n\n        qtext.setText(String.valueOf(subs));\n\n    }\n\n\n    public boolean checkPermissionForReadExtertalStorage() {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n            int result = getActivity().checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE);\n\n            return result == PackageManager.PERMISSION_GRANTED;\n        }\n\n        return false;\n    }\n\n\n    public void requestPermissionForReadExtertalStorage() throws Exception {\n\n        try {\n            ActivityCompat.requestPermissions((Activity) getContext(), new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},\n                    1);\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw e;\n        }\n    }\n\n\n\n     public void shareProduct()\n     {\n\n         share.setOnClickListener(new View.OnClickListener() {\n             @Override\n             public void onClick(View v) {\n                 Intent sharing = new Intent(Intent.ACTION_SEND);\n                 sharing.setType(\"text/plain\");\n                 sharing.putExtra(Intent.EXTRA_SUBJECT,productShareTitle);\n                 sharing.putExtra(Intent.EXTRA_TEXT,shareProductID);\n                 startActivity(Intent.createChooser(sharing,\"Share via\"));\n             }\n         });\n\n     }\n\n\n    @Override\n    public void recyclerViewListClicked(View v, int position) {\n        viewPager.setCurrentItem(position);\n\n    }\n\n\n    @Override\n    public void isClicked(boolean clicked, int position) {\n\n        FullScreenSlider(sendImage);\n\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/shopping/gway_4u/products_fragment.java	(revision 82c493fed0df9a0a9eaf5bc62eec9e92d44b8a46)
+++ app/src/main/java/com/shopping/gway_4u/products_fragment.java	(date 1611314568000)
@@ -1048,14 +1048,11 @@
               }
           }
 
-
        }catch (Exception e)
        {
            e.printStackTrace();
        }
 
-
-
    }
 
 
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\n  <component name=\"GradleSettings\">\n    <option name=\"linkedExternalProjectsSettings\">\n      <GradleProjectSettings>\n        <option name=\"testRunner\" value=\"PLATFORM\" />\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\n        <option name=\"modules\">\n          <set>\n            <option value=\"$PROJECT_DIR$\" />\n            <option value=\"$PROJECT_DIR$/app\" />\n          </set>\n        </option>\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\n      </GradleProjectSettings>\n    </option>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision 82c493fed0df9a0a9eaf5bc62eec9e92d44b8a46)
+++ .idea/gradle.xml	(date 1611314576000)
@@ -14,6 +14,7 @@
           </set>
         </option>
         <option name="resolveModulePerSourceSet" value="false" />
+        <option name="useQualifiedModuleNames" value="true" />
       </GradleProjectSettings>
     </option>
   </component>
